package com.databricks.sparkdl

import java.nio.file.Paths
import org.tensorflow.framework.GraphDef
import com.databricks.sparkdl.DeepImageFeaturizer.NamedImageModel
/**
 * File generated by sparkdl.utils.generate_app_models.
 * Models defined in sparkdl.transformers.keras_applications.py
 */

object Models {

  private[sparkdl] object TestNet extends NamedImageModel {
  /**
  * A simple test graph used for testing DeepImageFeaturizer
  */
    override val name = "_test"
    override val height = 60
    override val width = 40
    override val graphInputNode = "input"
    override val graphOutputNode = "sparkdl_output__"

    override def graph: GraphDef = {
      val file = getClass.getResource("/sparkdl/test_net.pb").getFile
      ModelFetcher.importGraph(Paths.get(file), "jVCEKp1bV53eib8d8OKreTH4fHu/Ji5NHMOsgdVwbMg=")
        .getOrElse {
          throw new Exception(s"""The hash of file $file did not match the expected value.""".stripMargin)
        }
    }
  }

  private[sparkdl] object InceptionV3 extends NamedImageModel {
    override val name = "InceptionV3"
    override val height = 299
    override val width = 299
    override val graphInputNode = name + "_input"
    override val graphOutputNode = name + "_sparkdl_output__"

    override def graph: GraphDef = ModelFetcher.getFromWeb(
        "https://s3-us-west-2.amazonaws.com/spark-deep-learning-models/sparkdl-InceptionV3_v1.pb",
        fileName = "sparkdl-inceptionV3_v1.pb",
        base64Hash = "8OImhbhTEoacQhEKRDjavT0xpMPH2pH3HQrOAZ1NUtA="
    )
  }

  private[sparkdl] object ResNet50 extends NamedImageModel {
    override val name = "ResNet50"
    override val height = 224
    override val width = 224
    override val graphInputNode = name + "_input"
    override val graphOutputNode = name + "_sparkdl_output__"

    override def graph: GraphDef = ModelFetcher.getFromWeb(
        "https://s3-us-west-2.amazonaws.com/spark-deep-learning-models/sparkdl-ResNet50_v1.pb",
        fileName = "sparkdl-inceptionV3_v1.pb",
        base64Hash = "yrnfcbi84GxJjo30eGkl27GAHxig0JsC106v5wQr3gE="
    )
  }

  private[sparkdl] object VGG16 extends NamedImageModel {
    override val name = "VGG16"
    override val height = 224
    override val width = 224
    override val graphInputNode = name + "_input"
    override val graphOutputNode = name + "_sparkdl_output__"

    override def graph: GraphDef = ModelFetcher.getFromWeb(
        "https://s3-us-west-2.amazonaws.com/spark-deep-learning-models/sparkdl-VGG16_v1.pb",
        fileName = "sparkdl-inceptionV3_v1.pb",
        base64Hash = "ILVEakOf5arJP11QK4GYDSy8grlUkcfyMR3NqnopXJY="
    )
  }

  private[sparkdl] object VGG19 extends NamedImageModel {
    override val name = "VGG19"
    override val height = 224
    override val width = 224
    override val graphInputNode = name + "_input"
    override val graphOutputNode = name + "_sparkdl_output__"

    override def graph: GraphDef = ModelFetcher.getFromWeb(
        "https://s3-us-west-2.amazonaws.com/spark-deep-learning-models/sparkdl-VGG19_v1.pb",
        fileName = "sparkdl-inceptionV3_v1.pb",
        base64Hash = "Bq+lSRfPr/Ia0GdkRNBrLhk/cDEEPfHBdOwyVdIm3u4="
    )
  }

  private[sparkdl] object Xception extends NamedImageModel {
    override val name = "Xception"
    override val height = 299
    override val width = 299
    override val graphInputNode = name + "_input"
    override val graphOutputNode = name + "_sparkdl_output__"

    override def graph: GraphDef = ModelFetcher.getFromWeb(
        "https://s3-us-west-2.amazonaws.com/spark-deep-learning-models/sparkdl-Xception_v1.pb",
        fileName = "sparkdl-inceptionV3_v1.pb",
        base64Hash = "yUmqmUDfL/0lLI9rukQ5a+v7n2dDXHO4E3OjdhHB5Eo="
    )
  }
  val _supportedModels = Set[NamedImageModel](TestNet,VGG16,Xception,VGG19,ResNet50,InceptionV3)
}

